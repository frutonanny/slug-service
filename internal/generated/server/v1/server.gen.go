// Package v1 provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.11.0 DO NOT EDIT.
package v1

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	openapi_types "github.com/deepmap/oapi-codegen/pkg/types"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// CreateSlugRequest defines model for CreateSlugRequest.
type CreateSlugRequest struct {
	// Название сегмента.
	Name Slug `json:"name"`

	// Опции сегмента.
	Options *struct {
		Percent *int `json:"percent,omitempty"`
	} `json:"options,omitempty"`
}

// CreateSlugResponse defines model for CreateSlugResponse.
type CreateSlugResponse struct {
	Data  *map[string]interface{} `json:"data,omitempty"`
	Error *Error                  `json:"error,omitempty"`
}

// DeleteSlugRequest defines model for DeleteSlugRequest.
type DeleteSlugRequest struct {
	// Название сегмента.
	Name Slug `json:"name"`
}

// DeleteSlugResponse defines model for DeleteSlugResponse.
type DeleteSlugResponse struct {
	Data  *map[string]interface{} `json:"data,omitempty"`
	Error *Error                  `json:"error,omitempty"`
}

// Error defines model for Error.
type Error struct {
	Code    string `json:"code"`
	Message string `json:"message"`
}

// GetUserSlugsData defines model for GetUserSlugsData.
type GetUserSlugsData struct {
	Slugs []Slug `json:"slugs"`
}

// GetUserSlugsRequest defines model for GetUserSlugsRequest.
type GetUserSlugsRequest struct {
	// Идентификатор пользователя.
	UserID UserID `json:"userID"`
}

// GetUserSlugsResponse defines model for GetUserSlugsResponse.
type GetUserSlugsResponse struct {
	Data  *GetUserSlugsData `json:"data,omitempty"`
	Error *Error            `json:"error,omitempty"`
}

// ModifyUserSlugsRequest defines model for ModifyUserSlugsRequest.
type ModifyUserSlugsRequest struct {
	Add    *[]Slug `json:"add,omitempty"`
	Delete *[]Slug `json:"delete,omitempty"`

	// Идентификатор пользователя.
	UserID UserID `json:"userID"`
}

// ModifyUserSlugsResponse defines model for ModifyUserSlugsResponse.
type ModifyUserSlugsResponse struct {
	Data  *map[string]interface{} `json:"data,omitempty"`
	Error *Error                  `json:"error,omitempty"`
}

// Название сегмента.
type Slug = string

// Идентификатор пользователя.
type UserID = openapi_types.UUID

// PostCreateSlugJSONBody defines parameters for PostCreateSlug.
type PostCreateSlugJSONBody = CreateSlugRequest

// PostDeleteSlugJSONBody defines parameters for PostDeleteSlug.
type PostDeleteSlugJSONBody = DeleteSlugRequest

// PostGetUserSlugsJSONBody defines parameters for PostGetUserSlugs.
type PostGetUserSlugsJSONBody = GetUserSlugsRequest

// PostModifyUserSlugsJSONBody defines parameters for PostModifyUserSlugs.
type PostModifyUserSlugsJSONBody = ModifyUserSlugsRequest

// PostCreateSlugJSONRequestBody defines body for PostCreateSlug for application/json ContentType.
type PostCreateSlugJSONRequestBody = PostCreateSlugJSONBody

// PostDeleteSlugJSONRequestBody defines body for PostDeleteSlug for application/json ContentType.
type PostDeleteSlugJSONRequestBody = PostDeleteSlugJSONBody

// PostGetUserSlugsJSONRequestBody defines body for PostGetUserSlugs for application/json ContentType.
type PostGetUserSlugsJSONRequestBody = PostGetUserSlugsJSONBody

// PostModifyUserSlugsJSONRequestBody defines body for PostModifyUserSlugs for application/json ContentType.
type PostModifyUserSlugsJSONRequestBody = PostModifyUserSlugsJSONBody

// ServerInterface represents all server handlers.
type ServerInterface interface {

	// (POST /createSlug)
	PostCreateSlug(ctx echo.Context) error

	// (POST /deleteSlug)
	PostDeleteSlug(ctx echo.Context) error

	// (POST /getUserSlugs)
	PostGetUserSlugs(ctx echo.Context) error

	// (POST /modifyUserSlugs)
	PostModifyUserSlugs(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// PostCreateSlug converts echo context to params.
func (w *ServerInterfaceWrapper) PostCreateSlug(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostCreateSlug(ctx)
	return err
}

// PostDeleteSlug converts echo context to params.
func (w *ServerInterfaceWrapper) PostDeleteSlug(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostDeleteSlug(ctx)
	return err
}

// PostGetUserSlugs converts echo context to params.
func (w *ServerInterfaceWrapper) PostGetUserSlugs(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostGetUserSlugs(ctx)
	return err
}

// PostModifyUserSlugs converts echo context to params.
func (w *ServerInterfaceWrapper) PostModifyUserSlugs(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostModifyUserSlugs(ctx)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.POST(baseURL+"/createSlug", wrapper.PostCreateSlug)
	router.POST(baseURL+"/deleteSlug", wrapper.PostDeleteSlug)
	router.POST(baseURL+"/getUserSlugs", wrapper.PostGetUserSlugs)
	router.POST(baseURL+"/modifyUserSlugs", wrapper.PostModifyUserSlugs)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/7yWz27bxhPHX0WY3+9Im5QjuS5vbiwEAhokqOpcAiPYkGOJgchldpdGjIBA6xTtoQFy",
	"7aF/0DdQXQsW6kZ5heEbFbukZYmkLLWJfJK02p1/n9n57mvweBjzCCMlwX0N0htgyMzX+wKZwt4w6X+F",
	"LxOUSi/GgscoVIBmS8RC1J//F3gMLvzPvjFmF5ZsbQBSC3isAh6ZYz5KTwTmN7hAv9KH7Hua0KSRfUtj",
	"+pP+pjG9z85otA1WyWOMwsPIhBKyV0GYhOA2HceCMIiKXxao0xjBhSBS2EcBaTpb4s9foKfMisCXSSDQ",
	"B/dpnsdRai3kLGMeSawm7TPF9GfJpAUoBBerytExm1IdwQEO8ZMVeFlG8042nlHnev+ifY/7xmsYRF9i",
	"1FeDeUpSiSAyHRKilKy/emcp1etjVu7nyKrm8QDVoUShqyAPimQXQ5T6L/0lUBjKdXu6cMSEYKeVuHKT",
	"q8JZij6RKLoHqyI5zHeVfReHjyrOVrXAbb4qVfwPHfKQ+8Hx6ersme9/JA0LfNP6H23mU4GopL7x62gy",
	"qs7bX2hEl3ROI3pPExrXTl18xcJ4qN3vP+l+/ejZk0fd+51nDzu93v6DTg8sPX2vb+hOu23N39hWzd0+",
	"nBWxFMxPdFH4nWTf0YT+olF2RtPsmwZ9oCldZW/pkqY62uyMxnSVvVsMr912cK/lOFu48/nzrVbTb22x",
	"z5q7W63W7m673Wo5juOABcdchEyBC0kS+FAdKakFQXTMTdkDZSzr6jV6KE4CDxv7j7tgwQkKmcd90sw1",
	"DSMWB+DCvW1n+55WK6YGBqLtzaTEEOZ5l5ey/5nGOlu60BCmdEkXOZXsXS0V3SVMn+364MJjLtWNYEHe",
	"eCjVF9w/zcdupAqtZHE8DDxz1H4hte9rqV/VTtVXQLrY40okaBbydjbJ7zjORgIoboyJoFTJ3+ertVDN",
	"bb0/tcD2Z1K4HpE35vyVNvkviNwI7oaIVJ8Nd0yk5kmxBpG5as6I9OcUZS0mxUx4k/2wjMqUzm+dHFVg",
	"87K2IWR1gn/H0GqfASuxZT/eUswCYrioa+txvKAp/UEjOr+5X3blwi1z3aBzmyZ0WcO+HnFJejdEecnb",
	"5o5BL3tm1LH+rba+byt4FtDcWv00bwqJQmsluE/LTXCAJzjkcYiRauS7wIJEDMGFgVKxa9tD7rHhgEvl",
	"7jl7TVsr7VH6TwAAAP//IPcWbqgOAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
