// Package v1 provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.11.0 DO NOT EDIT.
package v1

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"
	"time"

	openapi_types "github.com/deepmap/oapi-codegen/pkg/types"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// AddSlugsData defines model for AddSlugsData.
type AddSlugsData struct {
	// Название сегмента.
	Name Slug `json:"name"`

	// Время автоматического удаления пользователя из сегмента в формате RFC3339.
	Ttl *time.Time `json:"ttl,omitempty"`
}

// CreateSlugRequest defines model for CreateSlugRequest.
type CreateSlugRequest struct {
	// Название сегмента.
	Name Slug `json:"name"`

	// Опции сегмента.
	Options *struct {
		Percent *int `json:"percent,omitempty"`
	} `json:"options,omitempty"`
}

// CreateSlugResponse defines model for CreateSlugResponse.
type CreateSlugResponse struct {
	Data  *map[string]interface{} `json:"data,omitempty"`
	Error *Error                  `json:"error,omitempty"`
}

// DeleteSlugRequest defines model for DeleteSlugRequest.
type DeleteSlugRequest struct {
	// Название сегмента.
	Name Slug `json:"name"`
}

// DeleteSlugResponse defines model for DeleteSlugResponse.
type DeleteSlugResponse struct {
	Data  *map[string]interface{} `json:"data,omitempty"`
	Error *Error                  `json:"error,omitempty"`
}

// Error defines model for Error.
type Error struct {
	Code    string `json:"code"`
	Message string `json:"message"`
}

// GetReportData defines model for GetReportData.
type GetReportData struct {
	// Ссылка на CSV файл.
	Url string `json:"url"`
}

// GetReportRequest defines model for GetReportRequest.
type GetReportRequest struct {
	// Время в формате 'yyyy-mm'.
	Period string `json:"period"`

	// Идентификатор пользователя.
	UserID UserID `json:"userID"`
}

// GetReportResponse defines model for GetReportResponse.
type GetReportResponse struct {
	Data  *GetReportData `json:"data,omitempty"`
	Error *Error         `json:"error,omitempty"`
}

// GetUserSlugsData defines model for GetUserSlugsData.
type GetUserSlugsData struct {
	Slugs []Slug `json:"slugs"`
}

// GetUserSlugsRequest defines model for GetUserSlugsRequest.
type GetUserSlugsRequest struct {
	// Идентификатор пользователя.
	UserID UserID `json:"userID"`
}

// GetUserSlugsResponse defines model for GetUserSlugsResponse.
type GetUserSlugsResponse struct {
	Data  *GetUserSlugsData `json:"data,omitempty"`
	Error *Error            `json:"error,omitempty"`
}

// ModifyUserSlugsRequest defines model for ModifyUserSlugsRequest.
type ModifyUserSlugsRequest struct {
	Add    *[]AddSlugsData `json:"add,omitempty"`
	Delete *[]Slug         `json:"delete,omitempty"`

	// Идентификатор пользователя.
	UserID UserID `json:"userID"`
}

// ModifyUserSlugsResponse defines model for ModifyUserSlugsResponse.
type ModifyUserSlugsResponse struct {
	Data  *map[string]interface{} `json:"data,omitempty"`
	Error *Error                  `json:"error,omitempty"`
}

// Название сегмента.
type Slug = string

// Идентификатор пользователя.
type UserID = openapi_types.UUID

// PostCreateSlugJSONBody defines parameters for PostCreateSlug.
type PostCreateSlugJSONBody = CreateSlugRequest

// PostDeleteSlugJSONBody defines parameters for PostDeleteSlug.
type PostDeleteSlugJSONBody = DeleteSlugRequest

// PostGetReportJSONBody defines parameters for PostGetReport.
type PostGetReportJSONBody = GetReportRequest

// PostGetUserSlugsJSONBody defines parameters for PostGetUserSlugs.
type PostGetUserSlugsJSONBody = GetUserSlugsRequest

// PostModifyUserSlugsJSONBody defines parameters for PostModifyUserSlugs.
type PostModifyUserSlugsJSONBody = ModifyUserSlugsRequest

// PostCreateSlugJSONRequestBody defines body for PostCreateSlug for application/json ContentType.
type PostCreateSlugJSONRequestBody = PostCreateSlugJSONBody

// PostDeleteSlugJSONRequestBody defines body for PostDeleteSlug for application/json ContentType.
type PostDeleteSlugJSONRequestBody = PostDeleteSlugJSONBody

// PostGetReportJSONRequestBody defines body for PostGetReport for application/json ContentType.
type PostGetReportJSONRequestBody = PostGetReportJSONBody

// PostGetUserSlugsJSONRequestBody defines body for PostGetUserSlugs for application/json ContentType.
type PostGetUserSlugsJSONRequestBody = PostGetUserSlugsJSONBody

// PostModifyUserSlugsJSONRequestBody defines body for PostModifyUserSlugs for application/json ContentType.
type PostModifyUserSlugsJSONRequestBody = PostModifyUserSlugsJSONBody

// ServerInterface represents all server handlers.
type ServerInterface interface {

	// (POST /createSlug)
	PostCreateSlug(ctx echo.Context) error

	// (POST /deleteSlug)
	PostDeleteSlug(ctx echo.Context) error

	// (POST /getReport)
	PostGetReport(ctx echo.Context) error

	// (POST /getUserSlugs)
	PostGetUserSlugs(ctx echo.Context) error

	// (POST /modifyUserSlugs)
	PostModifyUserSlugs(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// PostCreateSlug converts echo context to params.
func (w *ServerInterfaceWrapper) PostCreateSlug(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostCreateSlug(ctx)
	return err
}

// PostDeleteSlug converts echo context to params.
func (w *ServerInterfaceWrapper) PostDeleteSlug(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostDeleteSlug(ctx)
	return err
}

// PostGetReport converts echo context to params.
func (w *ServerInterfaceWrapper) PostGetReport(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostGetReport(ctx)
	return err
}

// PostGetUserSlugs converts echo context to params.
func (w *ServerInterfaceWrapper) PostGetUserSlugs(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostGetUserSlugs(ctx)
	return err
}

// PostModifyUserSlugs converts echo context to params.
func (w *ServerInterfaceWrapper) PostModifyUserSlugs(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostModifyUserSlugs(ctx)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.POST(baseURL+"/createSlug", wrapper.PostCreateSlug)
	router.POST(baseURL+"/deleteSlug", wrapper.PostDeleteSlug)
	router.POST(baseURL+"/getReport", wrapper.PostGetReport)
	router.POST(baseURL+"/getUserSlugs", wrapper.PostGetUserSlugs)
	router.POST(baseURL+"/modifyUserSlugs", wrapper.PostModifyUserSlugs)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/7xYW08bRxT+K6tppbys2fUNyL5RoAipUSKc8NAIRRvvwWzkvWRmjLAiS1yi5iGolfrU",
	"h7ZR/4Hr4OIGYv7CmX8Uzaxv611fSDASEvbuzJxzvu/MN9/4DSkHXhj44HNGrDeElQ/As9XHNccpVWsV",
	"tmFzW34PaRAC5S6ot77tgfz/PYV9YpHvjOE6Rm8RQ04nDZ1wXpVDHWBl6obcDXxiEfxdHGMbr8VvGjax",
	"JU6xi9fYFKfYEe+wLU7wE3bxI3Y1cYYX2MQrbONn7MjxN9jFK3GOl9jFlprTxiv5ooOXmjjBNn7Eazlc",
	"nGJTw5Ym3mJXHPfWb2s7P67n8/mHS0QncGR7YRWIRXJmLp8xVzO5ladZ0zLl389EJ/sB9WxOLOLYHDLc",
	"9YDohNdDOYVx6voV0mjohMLrmkvBIdbzCJu9wajg5SsocwnEOgWbg4RlB17XgPFvwzVQWLIUbP/GG/EL",
	"drCTQEPWHI8YAi2Dr1Lx7CPXq3nEypqmTjzX730blOL6HCpAVcVj1aViMFYzCwOfQbJop9diCcCA0oDO",
	"gmNTDWrIDDagCncG8KSKRoMsvKLN/vj4+uXAUVE91/8J/Ao/GGWp35Y68YAxuzJ75Fip/Wl6FCetlbeA",
	"70AYUJ4uDzWatuX/ESfiPV7hJ7krP2NTWy/tyr3ZxP/xaml0s9WoS/Rb5Swj7o0mNrEDQqBu4ExXpIRk",
	"PKjX6/WM5z1IFQ2Zq33Uz3UllvlKCi81BnR7Y1YbPItGJSqNHuv9QsaqntWS0yLGWf2Kdt0CLrOecnAw",
	"+Up+cDl4bO4jJELQptSuJwCJlpzQpYN0JvbDXZCxlwj2jTTEUfwKJh4Fjrtfn1297ThzsxGzBI1Yz6sT",
	"I86SThyllLcme9ayd0VYAqKFq7mqMCk8f2ETL6WTkQYH26mH9lBz1na3nz5+sft4e33zxaPNUmlta7MU",
	"F6BcsRiToEKKBD0bgDiWzB940YvbEW+xI8VamjNxPNF3xdMrFk1YLZhmBnIPX2YKWaeQsVeyy5lCYXm5",
	"WCwUTNM0Y1Jfc50US9XQievvBwp2l6uVJXpaCeihWwZt7ck20ckhUBblfZiNLBH4dugSi+SXzKW8FEmb",
	"HygSjfLAiSiGg2g3jFX/J7aVFb2QJHTxUlnPyHamsSK7xJZztx1ikScB40O/Q6LGA8Z/CJx6dGr7vGe1",
	"7DCsumU11XjFZOy++Z7VTkkT2Yj3OKc1UA+idlbF50xzIQn0dozKYPywH0UrhuaSHN/QieEMnNR8jIxf",
	"BOZjZOjXFsRI0nXeMyMpjnQORkbQHDBS6RuAKYR8UCpwJt5hR5yKc02c9G2dOBvYukzf1unSTMm7XCQi",
	"8panqaD/yemafK7ue6dKXiZpzK8aXkrTeINtcYwd1Q6R/UnnfGBkFkR5wmXeM+NJv5dK+HS/PeR8cAbO",
	"tQ97HMkOmLATu5LzKadFKmHDJBbGWcIO3T9tSbsxc6uK91PA7JHoxb3MfDxeYBf/xSa2hppq3OLXlpaR",
	"9oNLF1vpFI/ZrQWxPMH33jPRk6xlGtcfUvE9T9ATo2Yq+o2oKRhQ6Y+I9Xy8CTbgEKpB6IHPtWgU0aM7",
	"OzngPLQMoxqU7epBwLi1aq5mDemu9hpfAgAA//85uNoFLhQAAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
